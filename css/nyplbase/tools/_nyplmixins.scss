/*------------------------------------*\
    $NYPL-MIXINS
\*------------------------------------*/




/*------------------------------------*\
 * COLORS & GRADIENTS
\*------------------------------------*/

/**
 * Callouts
 * puts a background color and 1px solid border on a container.
 
 	@include callout-box($blueLight, $indigo, $indigo);
 
 * creates a light blue background with dark blue border and text.
 	
 */
@mixin callout-box($bgcolor, $bordercolor, $textcolor: $black){
	background-color: $bgcolor;
	border-width: 1px;
	border-style: solid;
	border-color: $bordercolor;
	border-radius:$brand-round;	
	color: $textcolor;
	padding: $half-spacing-unit;
}
 
/**
 * Gradient
 * makes a simple linear top-to-bottom gradient.
 
 	@include linear-gradient($blue, $indigo);
 
 */
@mixin linear-gradient($color, $toColor) {
	background-color: $color;
	background-image: -webkit-linear-gradient(top, $color, $toColor);
	background-image: 		  linear-gradient(top, $color, $toColor);
}

/**
 * Text color
 * evaluates the background color of an element 
 * in order to pick which text color to use on top of it.
 
 * Also used in our button-color mixin,
 * so don't move this mixin around within the code!
 
	 @include text-on-bg($blue);
 
 */ 
@mixin text-on-bg($color){
	@if lightness($color) <= 55% {
			color: $white;	
	}
	@else {
			color: inherit;		
	}
}



/*------------------------------------*\
 * OBJECTS
\*------------------------------------*/

/**
 * Buttons
 */

// The following mixin is kind of based on http://tallpixels.com/advanced-sass-mixins/

/*
 * This styles the button, including text color, based on the color parameter.
 * It also concatenates the ".gradient" class so that the mixin
 * can use the background color to evaluate the darker stop color.
*/
@mixin button-color($color){
	background: $color;
	@include text-on-bg($color);

	&.gradient{
		$toColor: darken($color, $brand-gradient);
		@include linear-gradient($color, $toColor);		
	}


	&:hover{
		background: lighten($color, 10%);
	}
}



/**
 * Icons
 */

/**
 * Use this to extend an icon into a style,
 * which you can't do with a regular @extend.
 * (The argument is the name of the icon class.)
 
 @include extend-icon(icon-arrow-right2);
 
 */
@mixin extend-icon($name, $color: inherit){
	&::before{
		@include nypl-icon();
		color: $color;
	}
	
	@extend .#{$name};	
}


/** ALTER THIS FOR ARROW ICON???
 * Add a right-angled quote to links that imply movement, e.g.:
 *
   <a href=# class=go>Read more</a>
 *
 
.go:after{
    content:"\00A0" "\00BB"!important;
}
*/


/**
 * Tooltips
 * STILL WORKING ON THIS ONE -jA
 */
 
 /*
 
 	.tip--foo{
 		@include arrow(right, center, rgba($blue, .8));
 	}
	
 */
@mixin tooltip ($top, $side, $bgcolor: $blue, $textcolor: $white){
	background-color: rgba($bgcolor, .8);
	border-radius:$brand-round;
	color: $textcolor;
	padding: $half-spacing-unit;
	max-width: 80%;
	height: auto;
	
	// positioning
	position: absolute;
	top: $top;
	left: $side;
	

}
